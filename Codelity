class Solution {
    public int solution(String S) {
        int n = S.length();
        boolean[] occupied = new boolean[n];
        int count = 0;

        // Simulate moves
        for (int i = 0; i < n; i++) {
            char direction = S.charAt(i);
            int newPos = -1;
            if (direction == '<') {
                newPos = i - 1;
            } else if (direction == '>') {
                newPos = i + 1;
            } else if (direction == '^') {
                newPos = i - n;
            } else if (direction == 'v') {
                newPos = i + n;
            }
            if (newPos >= 0 && newPos < n && !occupied[newPos]) {
                occupied[newPos] = true;
                count++;
            }
        }

        return count;
    }
}
