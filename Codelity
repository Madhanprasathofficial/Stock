class Solution {
    public int solution(String S) {
        int n = S.length();
        boolean[] occupied = new boolean[n];
        int count = 0;

        // Simulate moves
        for (int i = 0; i < n; i++) {
            char direction = S.charAt(i);
            int newPos = -1;
            if (direction == '<') {
                newPos = i - 1;
            } else if (direction == '>') {
                newPos = i + 1;
            } else if (direction == '^') {
                newPos = i - 4; // Distance for '∧'
            } else if (direction == 'v') {
                newPos = i + 4; // Distance for '∨'
            }
            if (newPos >= 0 && newPos < n && !occupied[newPos]) {
                occupied[newPos] = true;
                count++;
            }
        }

        return count;
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();
        
        // Given test case from the question
        String givenTestCase = "∥ >∨ ∧ v";
        // Expected output: 2
        System.out.println("Given test case: " + solution.solution(givenTestCase));
        
        // Additional test case
        String additionalTestCase = "n⟨⟨∧⟨v⟩⟩";
        // Expected output: 6
        System.out.println("Additional test case: " + solution.solution(additionalTestCase));
    }
}
