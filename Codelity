class Solution {
    public int solution(String S) {
        int n = S.length();
        boolean[] occupied = new boolean[n];
        int count = 0;
        
        // Simulate moves
        for (int i = 0; i < n; i++) {
            char direction = S.charAt(i);
            int newPos = -1;
            if (direction == '<') {
                newPos = i - 1;
            } else if (direction == '>') {
                newPos = i + 1;
            } else if (direction == '^') {
                newPos = i - n;
            } else if (direction == 'v') {
                newPos = i + n;
            }
            if (newPos >= 0 && newPos < n && !occupied[newPos]) {
                occupied[newPos] = true;
                count++;
            }
        }
        
        return count;
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();
        
        // Test case 1
        String testCase1 = "<>v^";
        // Expected output: 4
        System.out.println("Test case 1: " + solution.solution(testCase1));
        
        // Test case 2
        String testCase2 = "^^^^^^";
        // Expected output: 1
        System.out.println("Test case 2: " + solution.solution(testCase2));
        
        // Test case 3
        String testCase3 = "><><><><";
        // Expected output: 0
        System.out.println("Test case 3: " + solution.solution(testCase3));
        
        // Test case 4
        String testCase4 = "v>v>v>v>v>v";
        // Expected output: 1
        System.out.println("Test case 4: " + solution.solution(testCase4));
        
        // Test case 5
        String testCase5 = ">>v^<<";
        // Expected output: 3
        System.out.println("Test case 5: " + solution.solution(testCase5));
    }
}
