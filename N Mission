package com.options.options;

class Solution{
    public int solution(int []D,int X){
        int len = D.length;
        
        // if the array length is less than 1
        if(len <= 1){
            return len;
        }
        else{
            
            // declare min_days variable and set that as 1
            int min_days = 1;
            
            // declare min_credit and max_credit to keep track of credits at each day
            int min_credit = D[0];
            int max_credit = D[0];
            
            // iterate over the given array
            for(int i=1;i<len;i++){
                
                // find an absolute difference between today's min_credit and current credits
                int diff_min = D[i] - min_credit;
                
                // find an absolute difference between today's max_credit and current credits
                int diff_max = D[i] - max_credit;
                diff_min = (diff_min < 0) ? -diff_min : diff_min;
                diff_max = (diff_max < 0) ? -diff_max : diff_max;
                
                // if any difference is more than the given difference
                if(diff_min > X || diff_max > X){
                    
                    // increment the min_days and update the min_credit and max_credit
                    min_days++;
                    min_credit = D[i];
                    max_credit = D[i];
                }
                else{
                    
                    // if the current element is less than the min_credit
                    if(D[i] < min_credit){
                        min_credit = D[i];
                    }
                    
                    // if the current element is more than the max_credit
                    if(D[i] > min_credit){
                        max_credit = D[i];
                    }
                    
                }
                
            }
            
            return min_days;
        }
    }
}
